env:
  - name: MONGO_INITDB_ROOT_USERNAME
    value:
  - name: MONGO_INITDB_ROOT_PASSWORD
    value:

          #It is not a good practice to add these values in the deployment file as it is.
          #It must be added into a secret and then called by the deployment file.

apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
type: Opaque                #Default for Arbitrary Key-Value Pairs
data:
  username:
  password:

  #Values in Secret must be Base64 encoded
  #Terminal --->
  #   $echo -n 'username' | base64
  #   $echo -n 'password' | base64

  #In case of PowerShell
  #   $encodedString = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes('username'))
  #   $encodedString = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes('password'))

  #Output will be a random set of strings and integers. This is the base64 encoded values of the corresponding fields.

  Secrets must be created before the deployment if we have to reference the secret inside the deployment file.
  !ORDER-OF-CREATION-MATTERS

  #   $kubectl apply -f mongo-secret.yaml
  #   $kubectl get secret

  Now refernce the secret inside the configuration file


--- # Helps include another yaml file under an existing one
apiVersion: v1
kind: Service
metadata:
  name: mongo-service
spec:
  selector:
    app: mongodb
  ports:
    - protocol: TCP
      port: 27017         # Can be different
      targetPort: 27017   # Can be different

#   $kubectl apply -f mongo.yaml
#   deployment.apps/mongodb-deployment unchanged
#   service/mongodb-service created

❯ kubectl describe service  mongodb-service
Name:              mongodb-service
Namespace:         default
Labels:            <none>
Annotations:       <none>
Selector:          app=mongodb
Type:              ClusterIP
IP Family Policy:  SingleStack
IP Families:       IPv4
IP:                10.97.85.138
IPs:               10.97.85.138
Port:              <unset>  27017/TCP
TargetPort:        27017/TCP
Endpoints:         10.244.0.29:27017
Session Affinity:  None
Events:            <none>

❯ kubectl get pod -o wide
NAME                                  READY   STATUS    RESTARTS   AGE   IP            NODE       NOMINATED NODE   READINESS GATES
mongodb-deployment-5d966bd9d6-29ldc   1/1     Running   0          10m   10.244.0.29   minikube   <none>           <none>

!Make-sure-the-Endpoint-in-mongodb-service-and-IP-of-the-running-Pod-are-the-same

#   $kubectl get all | grep mongodb               !LINUX
#   $kubectl get all | Select-String "mongodb"    !POWERSHELL

Similar to Secrets, for config files, Create config.yaml before referencing it into the deployment file.

#   $kubectl apply -f mongo-secret.yaml

apiVersion: v1
kind: Service
metadata:
  name: mongo-express-service
spec:
  selector:
    app: mongo-express
  type: LoadBalancer        #Assigns service an External IP and so accepts external requests.
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
      nodePort: 30000       #Port for external IP (Port we put in browser)
                            # Has a range ---> (30000 - 32767)

!Internal-service-or-ClusterIP-is-Default

kubectl get service
NAME                    TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
kubernetes              ClusterIP      10.96.0.1       <none>        443/TCP          3h53m
mongo-express-service   LoadBalancer   10.109.190.66   <pending>     8081:30000/TCP   10s
mongodb-service         ClusterIP      10.97.85.138    <none>        27017/TCP        132m

With InternalIP Address you just have a port for that IP Address
With both InternalIP and ExternalIP you have ports for Both of them.

#   $minikube service mongo-express-service
The above command will assign a public IP to the external service.